{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","buttonCountersPlus","i","startRange","push","buttonCountersMinus","map","element","reverse","align","onClick","updateCounter","index","count","removeCounter","resetCounter","App","useState","counters","setCounters","newCounters","splice","value","slice","setStartRange","className","type","min","max","step","onChange","event","target","key","randomNumber","Math","round","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAEe,SAASA,EAAQC,GAM5B,IAJA,IAGIC,EAAmB,GACdC,EAAE,EAAGA,GAAKF,EAAMG,WAAYD,IAAMD,EAAmBG,KAAKF,GAEnE,IAAMG,EAAsBJ,EAAmBK,KAAI,SAACC,GAAD,OACrC,EAAVA,KAAcC,UAGlB,OACI,yBAAKC,MAAO,UACPJ,EAAoBC,KAAI,SAACC,GAAD,OACvB,4BAAQG,QAAS,kBAAMV,EAAMW,cAAcX,EAAMY,MAAOL,KAAWA,MAEpEP,EAAMa,MAJX,6CAKKZ,EAAmBK,KAAI,SAACC,GAAD,OACtB,4BAAQG,QAAS,kBAAMV,EAAMW,cAAcX,EAAMY,MAAOL,KAAWA,MAErE,4BAAQG,QAnBJ,kBAAMV,EAAMc,cAAcd,EAAMY,SAmBpC,0BARJ,KASI,4BAAQF,QAnBJ,kBAAMV,EAAMe,aAAaf,EAAMY,SAmBnC,yBATJ,OCJO,SAASI,IAAM,MAEIC,mBAAS,CAAC,GAAG,GAAG,KAFpB,mBAErBC,EAFqB,KAEXC,EAFW,KAatBL,EAAgB,SAACF,GACrB,IAAIQ,EAAW,YAAOF,GACtBE,EAAYC,OAAOT,EAAO,GAG1BO,EAAYC,IAERL,EAAe,SAACH,GACpB,IAAIQ,EAAW,YAAOF,GACtBE,EAAYR,GAAS,EACrBO,EAAYC,IAEVT,EAAgB,SAACC,EAAOU,GAC1B,IAAIF,EAAcF,EAASK,QAC3BH,EAAYR,GAASQ,EAAYR,GAASU,EAC1CH,EAAYC,IA5Bc,EA8BUH,mBAAS,GA9BnB,mBA8BnBd,EA9BmB,KA8BPqB,EA9BO,KAmC5B,OACI,yBAAKC,UAAW,MAAOhB,MAAO,UAA9B,aACE,oLAC+BN,EAD/B,SAEE,2BACAuB,KAAK,QACLC,IAAK,EACLC,IAAK,GACLC,KAAM,EACNP,MAAOnB,EACP2B,SAde,SAACC,GAClBP,EAAcO,EAAMC,OAAOV,WAiBxBJ,EAASZ,KAAI,SAACC,EAASK,GAAV,OAUZ,kBAACb,EAAD,CACIc,MAAON,EACP0B,IAAKrB,EACLA,MAAOA,EACPD,cAAeA,EACfG,cAAeA,EACfC,aAAcA,EACdZ,WAAYA,OAGpB,6BACA,4BAAQO,QAjEK,WACnB,IAAMwB,EAAeC,KAAKC,MAAsB,GAAhBD,KAAKE,UAEpClB,EAAY,GAAD,mBAAKD,GAAL,CAAegB,OA8DrB,sBAlCF,IAmCE,4BAAQxB,QA7DG,WACfS,EAAY,YAAID,GAAUZ,KAAI,SAAAC,GAAO,OAAI,QA4DrC,sBAnCF,OCnCc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC7B,EAAD,OAEF8B,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.46e42659.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Counter(props) {\t\t                // объявляем этот компонент видимым для App.js\n\n    const rem = () => props.removeCounter(props.index);\t\t\t// функция Удалить текущий счетчик\n    const res = () => props.resetCounter(props.index);\t\t\t// функция Обнулить текущий счетчик\n// --------------------------------------------------------------------------------------------------------\n    let buttonCountersPlus=[];          // пустой массив, который наполним числами от 1 до startRange\n    for (let i=1; i <= props.startRange; i++) {buttonCountersPlus.push(i)}; // классический метод создания массива из значений, которые равны индексу плюс один\n//  const buttonCountersPlus =[...Array(props.startRange)].map((item, index)=>index+1) // оставлено для примера как более короткий усложненный вариант предыдущего цикла\n    const buttonCountersMinus = buttonCountersPlus.map((element) =>         // сложный комплексный прием, в нём выполняются сразу несколько задач:\n        element*(-1)).reverse();        // 1) делается копия массива 2) значения элементов массива -> отрицательными 3) порядок элементов массива реверсируется\n                                        // (смотреть таблицу приоритетов и идеологию chaining)\n// --------------------------------------------------------------------------------------------------------\n    return (\n        <div align={\"center\"}>\n            {buttonCountersMinus.map((element) => (        // выводим кнопки (как map по массиву) с отрицательными значениями\n              <button onClick={() => props.updateCounter(props.index, element)}>{element}</button>  // универсальной функцией\n            ))}\n            {props.count}                                          {/* выводим значение счетчика, переданное сюда из App */}\n            {buttonCountersPlus.map((element) => (                 // выводим кнопки (как map по массиву) с положительными значениями\n              <button onClick={() => props.updateCounter(props.index, element)}>{element}</button>  // универсальной функцией\n            ))}\n            <button onClick={rem}>Remove current counter</button>  {/* по нажатию этой кнопки вызываем функцию Удалить текущий счетчик */}\n            <button onClick={res}>Reset current counter</button>   {/* по нажатию этой кнопки вызываем функцию Обнулить текущий счетчик */}\n        </div>\n    );\n}\n","import React, {useState} from 'react';\t\t\t// подключение React’а и обязательно хука useState\nimport Counter from \"./Counter.js\";\t\t\t\t// будем подключать компонент Counter\n\n// сделано с огромной помощью r0mka (Roman Nikolaenkov - https://pasvus.slack.com/team/U0168FT0PNG)\n// название \"cra13-comments-add-dimension-form-input\" не совсем адекватно отображает суть\n// в предыдущей версии диапазон \"боковых\" субсчетчиков задавался с помощью  кнопок с ограничениями\n// в данной версии диапазон \"боковых\" субсчетчиков задаётся слайдером\n// важно: этот диапазон применяется ТОЛЬКО сразу ко всем счётчикам\n// для возможности раздельной \"регулировки\" по каждому счётчику нужно вместо массива значений счётчиков\n// создать и работать с массивом объектов (в следующей реализации)\n\nexport default function App() {\t\t\t\t\t// объявляем этот компонент App видимым для index.js\n\n  const [counters, setCounters] = useState([11,22,33]); // используем хук useState для обновления\n                                                                 // массива счетчиков\n// --------------------------------------------------------------------------------------------------------\n  const addCounter = () => {\t\t\t\t\t\t\t         // функция Добавить новый счетчик\n  const randomNumber = Math.round(Math.random() * 10);\t\t // создаём значение нового счетчика с помощью\n                                                                 // псевдогенератора случайных чисел\n   setCounters([...counters, randomNumber]) };\t\t\t     // добавляем новый счетчик путем и делаем\n// --------------------------------------------------------------------------------------------------------\n  const resetAll = () => {\t\t\t\t            \t\t\t // функция Обнулить все счетчики\n    setCounters([...counters].map(element => 0)) };\t\t\t     // ререндеринг массива счетчиков\n// --------------------------------------------------------------------------------------------------------\n  const removeCounter = (index) => {\t\t\t\t    \t\t // функция Удалить текущий счетчик\n    let newCounters = [...counters];\t\t\t\t\t    \t // делаем копию массива\n    newCounters.splice(index, 1);\t\t\t\t\t\t // удаляем элемент массива счетчиков\n                                                                 // https://learn.javascript.ru/array-methods :\n                                                                 // array.splice(index, 1); // начиная с позиции index, удалить 1 элемент\n    setCounters(newCounters) };\t\t\t\t\t            \t // ререндеринг массива счетчиков\n// --------------------------------------------------------------------------------------------------------\n  const resetCounter = (index) => {\t\t\t\t\t\t         // функция Обнулить текущий счетчик\n    let newCounters = [...counters]; \t        \t\t\t\t // делаем копию массива\n    newCounters[index] = 0;\t\t\t\t\t\t            \t // значение текущего счетчика в ноль\n    setCounters(newCounters) };\t\t\t\t\t            \t // ререндеринг массива счетчиков\n// --------------------------------------------------------------------------------------------------------\nconst updateCounter = (index, value) => {                        // вместо двух функций plusOne и minusOne создаем универсальную функцию\n    let newCounters = counters.slice();                          // делаем копию массива counters классическим методом\n    newCounters[index] = newCounters[index] + value;             // к элементу массива counters с индексом index прибавляем (а так как value могут быть и отрицательными - отнимаем) value\n    setCounters(newCounters);}                                   // ререндеринг массива счетчиков\n// --------------------------------------------------------------------------------------------------------\n    const [startRange, setStartRange] = useState(5);    // задаем переменную \"какой диапазон\" выводить, функцию по её обслуживанию и начальное значение диапазона\n    const handleChange = (event) => {                           // функция получения значения слайдера\n        setStartRange(event.target.value)                       // и ререндеринга массива счетчиков\n    }\n// --------------------------------------------------------------------------------------------------------\n  return (\n      <div className={\"App\"} align={\"center\"}>          {/* ядро кода, выводим по центру */}\n        <div>\n          Текущее значение диапазона: {startRange}      {/* выводим текст и значение startRange */}\n          <input                                        // input\n          type=\"range\"                                  // в виде слайдера\n          min={1}                                       // минимальное значение слайдера\n          max={10}                                      // максимальное значение слайдера\n          step={1}                                      // шаг слайдера\n          value={startRange}                            // в какую переменную отправить динамическую переменную startRange\n          onChange={handleChange}                       // в какую функцию\n        />\n        </div>\n\n          {counters.map((element, index) => (     // перебираем массив counters методом map\n// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/map :\n// Метод map вызывает переданную функцию callback один раз для каждого элемента, в порядке их появления и\n// конструирует новый массив из результатов её вызова. Функция callback вызывается только для индексов массива,\n// имеющих присвоенные значения, включая undefined. Она не вызывается для пропущенных элементов массива (то есть\n// для индексов, которые никогда не были заданы, которые были удалены или которым никогда не было присвоено\n// значение.\n// Функция callback вызывается с тремя аргументами: значением элемента, индексом элемента и массивом,\n// по которому осуществляется проход.\n\n            <Counter                                // вызвать Counter, передать props\n                count={element}                     // передать значение счетчика\n                key={index}                         // внутренний id, здесь равен index'у\n                index={index}                       // индекс элемента\n                updateCounter={updateCounter}       // адрес функции Универсальная функция обработки значения счетчика\n                removeCounter={removeCounter}       // адрес функции Удалить текущий счетчик\n                resetCounter={resetCounter}         // адрес функции Обнулить текущий счетчик\n                startRange={startRange}             // передаем в Counter значение размера диапазона\n            />\n        ))}\n        <hr/>\n        <button onClick={addCounter}>Create new counter</button> {/* вызов функции Добавить новый счетчик */}\n        <button onClick={resetAll}>Reset all counters</button>   {/* вызов функции Обнулить все счетчики */}\n      </div>\n\n  )\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}